diff -urN --new-file RetroArch/config.def.h rizos-ra/config.def.h
--- RetroArch/config.def.h	2021-10-04 20:45:45.222709006 +0000
+++ rizos-ra/config.def.h	2021-10-04 20:43:57.039660189 +0000
@@ -65,6 +65,8 @@
 #define DEFAULT_ASPECT_RATIO 1.7778f
 #elif defined(_XBOX1) || defined(GEKKO) || defined(ANDROID)
 #define DEFAULT_ASPECT_RATIO 1.3333f
+#elif defined(POCKETGOS30)
+#define DEFAULT_ASPECT_RATIO 1.5f
 #else
 #define DEFAULT_ASPECT_RATIO 1.3333f
 #endif
@@ -201,7 +203,7 @@
 
 /* To start in Fullscreen, or not. */
 
-#if defined(HAVE_STEAM) || defined(DINGUX) || defined(__WINRT__) || defined(WINAPI_FAMILY) && WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP
+#if defined(HAVE_STEAM) || defined(DINGUX) || defined(POCKETGOS30) || defined(__WINRT__) || defined(WINAPI_FAMILY) && WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP
 /* Start in fullscreen mode for Steam and Dingux
  * WinRT and Winapi Family builds */
 #define DEFAULT_FULLSCREEN true
@@ -269,7 +271,7 @@
 
 /* Fullscreen resolution. A value of 0 uses the desktop
  * resolution. */
-#if defined(DINGUX)
+#if defined(DINGUX) || defined(POCKETGOS30)
 #define DEFAULT_FULLSCREEN_X 320
 #define DEFAULT_FULLSCREEN_Y 240
 #elif defined(__WINRT__) || defined(WINAPI_FAMILY) && WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP
@@ -438,7 +440,7 @@
  * If video_force_aspect is not set, X/Y will be integer scaled independently.
  * Overscale rounds up instead of down, default is downscale.
  */
-#define DEFAULT_SCALE_INTEGER false
+#define DEFAULT_SCALE_INTEGER true
 #define DEFAULT_SCALE_INTEGER_OVERSCALE false
 
 /* Controls aspect ratio handling. */
@@ -755,18 +757,18 @@
 
 #define DEFAULT_SHOW_ADVANCED_SETTINGS false
 
-#define DEFAULT_RGUI_COLOR_THEME RGUI_THEME_CLASSIC_GREEN
+#define DEFAULT_RGUI_COLOR_THEME RGUI_THEME_MIDNIGHT_BLUE
 #define DEFAULT_RGUI_TRANSPARENCY true
 
 static const bool rgui_inline_thumbnails = false;
 static const bool rgui_swap_thumbnails = false;
 static const unsigned rgui_thumbnail_downscaler = RGUI_THUMB_SCALE_POINT;
 static const unsigned rgui_thumbnail_delay = 0;
-static const unsigned rgui_internal_upscale_level = RGUI_UPSCALE_NONE;
+static const unsigned rgui_internal_upscale_level = RGUI_UPSCALE_AUTO;
 static const bool rgui_full_width_layout = true;
-static const unsigned rgui_aspect = RGUI_ASPECT_RATIO_4_3;
-static const unsigned rgui_aspect_lock = RGUI_ASPECT_RATIO_LOCK_NONE;
-static const bool rgui_shadows = false;
+static const unsigned rgui_aspect = RGUI_ASPECT_RATIO_3_2;
+static const unsigned rgui_aspect_lock = RGUI_ASPECT_RATIO_LOCK_FIT_SCREEN;
+static const bool rgui_shadows = true;
 static const unsigned rgui_particle_effect = RGUI_PARTICLE_EFFECT_NONE;
 #define DEFAULT_RGUI_PARTICLE_EFFECT_SPEED 1.0f
 #define DEFAULT_RGUI_PARTICLE_EFFECT_SCREENSAVER true
@@ -1024,6 +1026,8 @@
 #if defined(ANDROID) || defined(EMSCRIPTEN) || defined(RETROFW)
 /* For most Android devices, 64ms is way too low. */
 #define DEFAULT_OUT_LATENCY 128
+#elif defined(POCKETGOS30)
+#define DEFAULT_OUT_LATENCY 85
 #else
 #define DEFAULT_OUT_LATENCY 64
 #endif
@@ -1306,6 +1310,8 @@
  * drivers and display widgets */
 #if defined(VITA)
 #define DEFAULT_MENU_SCALE_FACTOR 1.5f
+#elif defined(POCKETGOS30)
+#define DEFAULT_MENU_SCALE_FACTOR 1.35f
 #else
 #define DEFAULT_MENU_SCALE_FACTOR 1.0f
 #endif
@@ -1341,7 +1347,7 @@
 
 #define DEFAULT_ANALOG_DEADZONE 0.0f
 
-#define DEFAULT_ANALOG_SENSITIVITY 1.0f
+#define DEFAULT_ANALOG_SENSITIVITY 1.35f
 
 /* Describes speed of which turbo-enabled buttons toggle. */
 static const unsigned turbo_period        = 6;
@@ -1373,7 +1379,7 @@
 
 static const bool input_descriptor_hide_unbound = false;
 
-#if defined(DINGUX)
+#if defined(DINGUX) || defined(POCKETGOS30)
 static const unsigned input_max_users = 1;
 #else
 static const unsigned input_max_users = 5;
diff -urN --new-file RetroArch/configuration.c rizos-ra/configuration.c
--- RetroArch/configuration.c	2021-10-04 20:45:45.222709006 +0000
+++ rizos-ra/configuration.c	2021-10-04 20:43:57.043660154 +0000
@@ -171,6 +171,7 @@
    INPUT_RWEBINPUT,
    INPUT_DOS,
    INPUT_WINRAW,
+   INPUT_S30,
    INPUT_NULL
 };
 
@@ -197,6 +198,7 @@
    JOYPAD_QNX,
    JOYPAD_RWEBPAD,
    JOYPAD_MFI,
+   JOYPAD_S30,
    JOYPAD_NULL
 };
 
@@ -556,6 +558,8 @@
 static const enum input_driver_enum INPUT_DEFAULT_DRIVER = INPUT_X;
 #elif defined(HAVE_UDEV)
 static const enum input_driver_enum INPUT_DEFAULT_DRIVER = INPUT_UDEV;
+#elif defined(POCKETGOS30)
+static const enum input_driver_enum INPUT_DEFAULT_DRIVER = INPUT_S30;
 #elif defined(__linux__) && !defined(ANDROID)
 static const enum input_driver_enum INPUT_DEFAULT_DRIVER = INPUT_LINUXRAW;
 #elif defined(HAVE_WAYLAND)
@@ -602,6 +606,8 @@
 static const enum joypad_driver_enum JOYPAD_DEFAULT_DRIVER = JOYPAD_DINPUT;
 #elif defined(HAVE_UDEV)
 static const enum joypad_driver_enum JOYPAD_DEFAULT_DRIVER = JOYPAD_UDEV;
+#elif defined(POCKETGOS30)
+static const enum joypad_driver_enum JOYPAD_DEFAULT_DRIVER = JOYPAD_S30;
 #elif defined(__linux) && !defined(ANDROID)
 static const enum joypad_driver_enum JOYPAD_DEFAULT_DRIVER = JOYPAD_LINUXRAW;
 #elif defined(ANDROID)
@@ -654,7 +660,7 @@
 static const enum location_driver_enum LOCATION_DEFAULT_DRIVER = LOCATION_NULL;
 #endif
 
-#if (defined(_3DS) || defined(DINGUX)) && defined(HAVE_RGUI)
+#if (defined(_3DS) || defined(DINGUX) || defined(POCKETGOS30)) && defined(HAVE_RGUI)
 static const enum menu_driver_enum MENU_DEFAULT_DRIVER = MENU_RGUI;
 #elif defined(HAVE_MATERIALUI) && defined(RARCH_MOBILE)
 static const enum menu_driver_enum MENU_DEFAULT_DRIVER = MENU_MATERIALUI;
@@ -1012,6 +1018,8 @@
 
    switch (default_driver)
    {
+      case INPUT_S30:
+         return "s30";
       case INPUT_ANDROID:
          return "android";
       case INPUT_PS4:
@@ -1086,6 +1094,8 @@
 
    switch (default_driver)
    {
+      case JOYPAD_S30:
+         return "s30";
       case JOYPAD_PS4:
          return "ps4";
       case JOYPAD_PS3:
diff -urN --new-file RetroArch/frontend/drivers/platform_unix.c rizos-ra/frontend/drivers/platform_unix.c
--- RetroArch/frontend/drivers/platform_unix.c	2021-10-04 20:45:45.222709006 +0000
+++ rizos-ra/frontend/drivers/platform_unix.c	2021-10-04 20:43:57.259658217 +0000
@@ -1343,6 +1343,7 @@
 
    pclose(command_file);
 }
+#endif
 
 static void frontend_unix_set_screen_brightness(int value)
 {
@@ -1350,6 +1351,14 @@
    char svalue[16] = {0};
    unsigned int max_brightness = 100;
 
+#ifdef POCKETGOS30
+   /* Calculate the brightness */
+   value = (value * 255) / 100;
+
+   snprintf(svalue, sizeof(svalue), "%d\n", value);
+   filestream_write_file("/sys/class/disp/disp/attr/lcdbl",
+                         svalue, strlen(svalue));
+#else
    /* Device tree should have 'label = "backlight";' if control is desirable */
    filestream_read_file("/sys/class/backlight/backlight/max_brightness",
                         &buffer, NULL);
@@ -1365,9 +1374,8 @@
    snprintf(svalue, sizeof(svalue), "%d\n", value);
    filestream_write_file("/sys/class/backlight/backlight/brightness",
                          svalue, strlen(svalue));
-}
-
 #endif
+}
 
 static void frontend_unix_get_env(int *argc,
       char *argv[], void *data, void *params_data)
@@ -2833,7 +2841,7 @@
 #else
    NULL,                               /* get_lakka_version */
 #endif
-#if defined(HAVE_LAKKA_SWITCH) || (defined(HAVE_LAKKA) && defined(HAVE_ODROIDGO2))
+#if defined(POCKETGOS30) || defined(HAVE_LAKKA_SWITCH) || (defined(HAVE_LAKKA) && defined(HAVE_ODROIDGO2))
    frontend_unix_set_screen_brightness,/* set_screen_brightness */
 #else
    NULL,                         /* set_screen_brightness */
diff -urN --new-file RetroArch/gfx/common/gl_common.h rizos-ra/gfx/common/gl_common.h
--- RetroArch/gfx/common/gl_common.h	2021-10-04 20:45:45.222709006 +0000
+++ rizos-ra/gfx/common/gl_common.h	2021-10-04 20:43:57.263658181 +0000
@@ -218,7 +218,7 @@
 
    struct scaler_ctx pbo_readback_scaler;
    struct video_viewport vp;                          /* int alignment */
-   math_matrix_4x4 mvp, mvp_no_rot;
+   math_matrix_4x4 mvp, mvp_no_rot, mvp_screen_rot;
    struct video_coords coords;                        /* ptr alignment */
    struct scaler_ctx scaler;
    video_info_t video_info;
diff -urN --new-file RetroArch/gfx/drivers/gl.c rizos-ra/gfx/drivers/gl.c
--- RetroArch/gfx/drivers/gl.c	2021-10-04 20:45:45.226708970 +0000
+++ rizos-ra/gfx/drivers/gl.c	2021-10-04 20:43:57.267658145 +0000
@@ -376,6 +376,10 @@
    matrix_4x4_ortho(gl->mvp_no_rot, ortho->left, ortho->right,
          ortho->bottom, ortho->top, ortho->znear, ortho->zfar);
 
+   matrix_4x4_rotate_z(rot, M_PI * 90 / 180.0f);
+   matrix_4x4_multiply(gl->mvp_screen_rot, rot, gl->mvp_no_rot);
+   gl->mvp_no_rot = gl->mvp_screen_rot;
+
    if (!allow_rotate)
    {
       gl->mvp = gl->mvp_no_rot;
@@ -467,7 +471,7 @@
       gl->vp.y *= 2;
 #endif
 
-   glViewport(gl->vp.x, gl->vp.y, gl->vp.width, gl->vp.height);
+   glViewport(gl->vp.y, gl->vp.x, gl->vp.height, gl->vp.width);
    gl2_set_projection(gl, &default_ortho, allow_rotate);
 
    /* Set last backbuffer viewport. */
@@ -1881,7 +1885,7 @@
    glEnable(GL_BLEND);
 
    if (gl->overlay_full_screen)
-      glViewport(0, 0, width, height);
+      glViewport(0, 0, height, width);
 
    /* Ensure that we reset the attrib array. */
    gl->shader->use(gl, gl->shader_data,
@@ -1907,7 +1911,7 @@
    gl->coords.color     = gl->white_color_ptr;
    gl->coords.vertices  = 4;
    if (gl->overlay_full_screen)
-      glViewport(gl->vp.x, gl->vp.y, gl->vp.width, gl->vp.height);
+      glViewport(gl->vp.y, gl->vp.x, gl->vp.height, gl->vp.width);
 }
 #endif
 
@@ -2464,9 +2468,9 @@
 
    if (gl->menu_texture_full_screen)
    {
-      glViewport(0, 0, width, height);
+      glViewport(0, 0, height, width);
       glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
-      glViewport(gl->vp.x, gl->vp.y, gl->vp.width, gl->vp.height);
+      glViewport(gl->vp.y, gl->vp.x, gl->vp.height, gl->vp.width);
    }
    else
       glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
@@ -2579,8 +2583,8 @@
       bounds = video_layout_screen(0);
 
       glViewport(
-         bounds->x, gl->video_height - bounds->y - bounds->h,
-         bounds->w, bounds->h
+         gl->video_height - bounds->y - bounds->h, bounds->x,
+         bounds->h, bounds->w
       );
    }
 }
@@ -2592,7 +2596,7 @@
    if (!video_layout_valid())
       return;
 
-   glViewport(0, 0, gl->video_width, gl->video_height);
+   glViewport(0, 0, gl->video_height, gl->video_width);
    glEnable(GL_BLEND);
 
    for (i = 0; i < video_layout_layer_count(); ++i)
diff -urN --new-file RetroArch/gfx/drivers_context/mali_fbdev_ctx.c rizos-ra/gfx/drivers_context/mali_fbdev_ctx.c
--- RetroArch/gfx/drivers_context/mali_fbdev_ctx.c	2021-10-04 20:45:45.226708970 +0000
+++ rizos-ra/gfx/drivers_context/mali_fbdev_ctx.c	2021-10-04 20:43:57.275658073 +0000
@@ -71,14 +71,6 @@
        mali->resize       = false;
        free(mali);
    }
-
-   /* Clear framebuffer and set cursor on again */
-   fd = open("/dev/tty", O_RDWR);
-   ioctl(fd, VT_ACTIVATE, 5);
-   ioctl(fd, VT_ACTIVATE, 1);
-   close(fd);
-
-   system("setterm -cursor on");
 }
 
 static void gfx_ctx_mali_fbdev_get_video_size(void *data,
@@ -171,11 +163,11 @@
    width                      = vinfo.xres;
    height                     = vinfo.yres;
 
-   mali->width                = width;
-   mali->height               = height;
+   mali->width                = height;
+   mali->height               = width;
 
-   mali->native_window.width  = vinfo.xres;
-   mali->native_window.height = vinfo.yres;
+   mali->native_window.width  = width;
+   mali->native_window.height = height;
 
    mali->refresh_rate = 1000000.0f / vinfo.pixclock * 1000000.0f /
          (vinfo.yres + vinfo.upper_margin + vinfo.lower_margin + vinfo.vsync_len) /
diff -urN --new-file RetroArch/gfx/drivers_display/gfx_display_gl.c rizos-ra/gfx/drivers_display/gfx_display_gl.c
--- RetroArch/gfx/drivers_display/gfx_display_gl.c	2021-10-04 20:45:45.230708936 +0000
+++ rizos-ra/gfx/drivers_display/gfx_display_gl.c	2021-10-04 20:43:57.275658073 +0000
@@ -75,6 +75,32 @@
    1, 1
 };
 
+/*
+DEFAULT
+   0, 0,
+   1, 0,
+   0, 1,
+   1, 1
+
+90 FLIP
+   0, 1,
+   0, 0,
+   1, 1,
+   1, 0
+
+180 FLIP
+   1, 1,
+   0, 1,
+   1, 0,
+   0, 0,
+
+270 FLIP
+   1, 0,
+   0, 1,
+   0, 0,
+   1, 1
+*/
+
 static const GLfloat gl_tex_coords[] = {
    0, 1,
    1, 1,
@@ -211,6 +237,8 @@
 }
 #endif
 
+static float test = 0;
+
 static void gfx_display_gl_draw(gfx_display_ctx_draw_t *draw,
       void *data, unsigned video_width, unsigned video_height)
 {
@@ -236,15 +264,15 @@
    if (!draw->coords->lut_tex_coord)
       draw->coords->lut_tex_coord = &gl_tex_coords[0];
 
-   glViewport(draw->x, draw->y, draw->width, draw->height);
+   draw->y = video_height - draw->height - draw->y;
+
+   glViewport(draw->y, draw->x, draw->height, draw->width);
    glBindTexture(GL_TEXTURE_2D, (GLuint)draw->texture);
 
    gl->shader->set_coords(gl->shader_data, draw->coords);
-   gl->shader->set_mvp(gl->shader_data,
-         draw->matrix_data ? (math_matrix_4x4*)draw->matrix_data
+   gl->shader->set_mvp(gl->shader_data, draw->matrix_data ? (math_matrix_4x4*)draw->matrix_data
       : (math_matrix_4x4*)&gl->mvp_no_rot);
 
-
    glDrawArrays(gfx_display_prim_to_gl_enum(
             draw->prim_type), 0, draw->coords->vertices);
 
@@ -352,7 +380,7 @@
       int x, int y,
       unsigned width, unsigned height)
 {
-   glScissor(x, video_height - y - height, width, height);
+   glScissor(video_height - y - height, x, height, width);
    glEnable(GL_SCISSOR_TEST);
 #ifdef MALI_BUG
    /* TODO/FIXME: If video width/height changes between
@@ -372,7 +400,7 @@
       unsigned video_width,
       unsigned video_height)
 {
-   glScissor(0, 0, video_width, video_height);
+   glScissor(0, 0, video_height, video_width);
    glDisable(GL_SCISSOR_TEST);
 #ifdef MALI_BUG
    scissor_set_rectangle(0, video_width - 1, 0, video_height - 1, 0);
diff -urN --new-file RetroArch/gfx/drivers_shader/shader_glsl.c rizos-ra/gfx/drivers_shader/shader_glsl.c
--- RetroArch/gfx/drivers_shader/shader_glsl.c	2021-10-04 20:45:45.230708936 +0000
+++ rizos-ra/gfx/drivers_shader/shader_glsl.c	2021-10-04 20:43:57.279658037 +0000
@@ -94,6 +94,8 @@
    int frame_count;
    int frame_direction;
 
+   int rotation;
+
    int lut_texture[GFX_MAX_TEXTURES];
    unsigned frame_count_mod;
 
@@ -643,6 +645,8 @@
    uni->frame_count     = gl_glsl_get_uniform(glsl, prog, "FrameCount");
    uni->frame_direction = gl_glsl_get_uniform(glsl, prog, "FrameDirection");
 
+   uni->rotation        = gl_glsl_get_uniform(glsl, prog, "Rotation");
+
    for (i = 0; i < glsl->shader->luts; i++)
       uni->lut_texture[i] = glGetUniformLocation(prog, glsl->shader->lut[i].id);
 
@@ -1238,6 +1242,11 @@
          glUniform1i(uni->frame_direction, 1);
    }
 
+    if (uni->rotation >= 0)
+   {
+      glUniform1i(uni->rotation, retroarch_get_rotation());
+   }
+
    /* Set lookup textures. */
    for (i = 0; i < glsl->shader->luts; i++)
    {
diff -urN --new-file RetroArch/griffin/griffin.c rizos-ra/griffin/griffin.c
--- RetroArch/griffin/griffin.c	2021-10-04 20:45:45.234708902 +0000
+++ rizos-ra/griffin/griffin.c	2021-10-04 20:43:57.367657248 +0000
@@ -751,6 +751,9 @@
 #elif defined(DINGUX) && defined(HAVE_SDL_DINGUX)
 #include "../input/drivers/sdl_dingux_input.c"
 #include "../input/drivers_joypad/sdl_dingux_joypad.c"
+#elif defined(POCKETGOS30)
+#include "../input/drivers/s30_input.c"
+#include "../input/drivers_joypad/s30_joypad.c"
 #endif
 
 #ifdef HAVE_WAYLAND
diff -urN --new-file RetroArch/input/drivers/s30_input.c rizos-ra/input/drivers/s30_input.c
--- RetroArch/input/drivers/s30_input.c	1970-01-01 00:00:00.000000000 +0000
+++ rizos-ra/input/drivers/s30_input.c	2021-10-04 20:43:57.371657212 +0000
@@ -0,0 +1,53 @@
+/*  RetroArch - A frontend for libretro.
+ *  Copyright (C) 2011-2018 - Francisco Javier Trujillo Mata - fjtrujy
+ *
+ *  RetroArch is free software: you can redistribute it and/or modify it under the terms
+ *  of the GNU General Public License as published by the Free Software Found-
+ *  ation, either version 3 of the License, or (at your option) any later version.
+ *
+ *  RetroArch is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
+ *  PURPOSE.  See the GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License along with RetroArch.
+ *  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <stdint.h>
+#include <stdlib.h>
+
+#include <libretro.h>
+
+#include "../input_driver.h"
+
+#include "../../verbosity.h"
+
+/* Empty input driver - all functionality
+ * is handled in the s30 joypad driver */
+
+static void* s30_input_initialize(const char *joypad_driver)
+{
+   return (void*)-1;
+}
+
+static void s30_input_free_input(void *data)
+{
+}
+
+static uint64_t s30_input_get_capabilities(void *data)
+{
+   return (1 << RETRO_DEVICE_JOYPAD) |  (1 << RETRO_DEVICE_ANALOG) | (1 << RETRO_DEVICE_KEYBOARD);
+}
+
+input_driver_t input_s30 = {
+   s30_input_initialize,
+   NULL,                         /* poll */
+   NULL,                         /* input_state */
+   s30_input_free_input,
+   NULL,
+   NULL,
+   s30_input_get_capabilities,
+   "s30",
+   NULL,                         /* grab_mouse */
+   NULL 
+};
diff -urN --new-file RetroArch/input/drivers_joypad/s30_joypad.c rizos-ra/input/drivers_joypad/s30_joypad.c
--- RetroArch/input/drivers_joypad/s30_joypad.c	1970-01-01 00:00:00.000000000 +0000
+++ rizos-ra/input/drivers_joypad/s30_joypad.c	2021-10-04 20:43:57.375657176 +0000
@@ -0,0 +1,399 @@
+/*  RetroArch - A frontend for libretro.
+ *  Copyright (C) 2010-2014 - Hans-Kristian Arntzen
+ *  Copyright (C) 2011-2017 - Daniel De Matteis
+ *  Copyright (C) 2014-2017 - Higor Euripedes
+ *
+ *  RetroArch is free software: you can redistribute it and/or modify it under the terms
+ *  of the GNU General Public License as published by the Free Software Found-
+ *  ation, either version 3 of the License, or (at your option) any later version.
+ *
+ *  RetroArch is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
+ *  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
+ *  PURPOSE.  See the GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License along with RetroArch.
+ *  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include <stdint.h>
+
+#include <compat/strl.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <linux/input.h>
+#include <unistd.h>
+
+#include "../input_driver.h"
+
+#include "../../tasks/tasks_internal.h"
+#include "../../verbosity.h"
+
+#include <stdio.h>
+
+#include <sunxi_gpio.h>
+
+#define S30_MAX_PADS 1 
+#define S30_ANALOG_STICKS 1
+#define S30_ANALOG_AXIS 2
+
+#define S30_DPAD_UP     SUNXI_GPG(9)
+#define S30_DPAD_DOWN   SUNXI_GPG(8)
+#define S30_DPAD_LEFT   SUNXI_GPL(8)
+#define S30_DPAD_RIGHT  SUNXI_GPL(9)
+
+#define S30_BUTTON_B    SUNXI_GPG(10)
+#define S30_BUTTON_Y    SUNXI_GPG(11)
+#define S30_BUTTON_A    SUNXI_GPG(12)
+#define S30_BUTTON_X    SUNXI_GPG(13)
+
+#define S30_BUTTON_SELECT  SUNXI_GPL(11)
+#define S30_BUTTON_START   SUNXI_GPG(4)
+
+#define S30_BUTTON_UNKNOWN SUNXI_GPG(5) // Probably analog click but it's broken
+
+#define S30_VOLUME_UP      SUNXI_GPG(1)
+#define S30_VOLUME_DOWN    SUNXI_GPG(0)
+
+#define S30_BUTTON_L2 SUNXI_GPB(7)
+#define S30_BUTTON_R1 SUNXI_GPG(3)
+#define S30_BUTTON_L1 SUNXI_GPB(6)
+#define S30_BUTTON_R2 SUNXI_GPG(2)
+
+#define S30_BUTTON_POWER 0x74
+
+#define S30_UNSUPPORTED 0xFFFF
+
+#define S30_NUM_GPIO 16
+
+static int polling_list[S30_NUM_GPIO] = {
+   S30_DPAD_UP,
+   S30_DPAD_DOWN,
+   S30_DPAD_LEFT,
+   S30_DPAD_RIGHT,
+   S30_BUTTON_A,
+   S30_BUTTON_B,
+   S30_BUTTON_Y,
+   S30_BUTTON_X,
+   S30_BUTTON_START,
+   S30_BUTTON_SELECT,
+   S30_BUTTON_L1,
+   S30_BUTTON_R1,
+   S30_BUTTON_L2,
+   S30_BUTTON_R2,
+   S30_VOLUME_UP,
+   S30_VOLUME_DOWN,
+};
+
+typedef struct _s30_joypad
+{
+   int fdevent1; // Joystick analog values
+   int fdevent3; // Power button
+   uint64_t pad_state;
+   int16_t analog_state[S30_ANALOG_AXIS];
+   bool centered[S30_ANALOG_AXIS];
+   uint8_t analog_center[S30_ANALOG_AXIS];
+} s30_joypad_t;
+
+static INLINE int16_t convert_u8_to_s16(uint8_t val)
+{
+   if (val == 0)
+      return -0x7fff;
+   return val * 0x0101 - 0x8000;
+}
+
+static s30_joypad_t s30_pad;
+
+static const char *s30_joypad_name(unsigned pad)
+{
+   return "Pocketgo S30 Controller";
+}
+
+static void s30_joypad_destroy(void)
+{
+   if (s30_pad.fdevent1 > 0)
+      close(s30_pad.fdevent1);
+   
+   if (s30_pad.fdevent3 > 0)
+      close(s30_pad.fdevent3);
+
+   memset(&s30_pad, 0, sizeof(s30_pad));
+
+   input_autoconfigure_disconnect(0, s30_joypad.ident);
+}
+
+static void *s30_joypad_init(void *data)
+{
+   if (sunxi_gpio_init() < 0)
+      goto error;
+
+   // EVENT 1 = Switch Joystick
+   s30_pad.fdevent1 = open("/dev/input/event1", O_RDONLY|O_NONBLOCK);
+   if (s30_pad.fdevent1 < 0)
+      goto error;
+
+   // EVENT 3 = Power button
+   s30_pad.fdevent3 = open("/dev/input/event3", O_RDONLY|O_NONBLOCK);
+   if (s30_pad.fdevent3 < 0)
+      goto error;
+
+   s30_pad.centered[0] = false;
+   s30_pad.centered[1] = false;
+
+   /* 'Register' joypad connection via
+    * autoconfig task */
+   input_autoconfigure_connect(
+         s30_joypad_name(0),        /* name */
+         NULL,                      /* display_name */
+         s30_joypad.ident,          /* driver */
+         0,                         /* port */
+         0,                         /* vid */
+         0);                        /* pid */
+
+   return (void*)-1;
+
+error:
+   s30_joypad_destroy();
+   return NULL;
+}
+
+static int32_t s30_joypad_button(unsigned port, uint16_t joykey)
+{
+   s30_joypad_t *joypad = (s30_joypad_t*)&s30_pad;
+
+   if (port != 0)
+      return 0;
+
+   return (joypad->pad_state & (UINT64_C(1) << joykey));
+}
+
+static int16_t s30_joypad_axis_state(unsigned port, uint32_t joyaxis)
+{
+   s30_joypad_t *joypad = (s30_joypad_t*)&s30_pad;
+
+   int    val  = 0;
+   int    axis = -1;
+   bool is_neg = false;
+   bool is_pos = false;
+
+   if (AXIS_NEG_GET(joyaxis) < 4)
+   {
+      axis   = AXIS_NEG_GET(joyaxis);
+      is_neg = true;
+   }
+   else if (AXIS_POS_GET(joyaxis) < 4)
+   {
+      axis   = AXIS_POS_GET(joyaxis);
+      is_pos = true;
+   }
+   else
+      return 0;
+
+   switch (axis)
+   {
+      case 0:
+      case 1:
+         val = joypad->analog_state[axis];
+         break;
+      case 2:
+      case 3:
+         break;
+   }
+
+   if (is_neg && val > 0)
+      return 0;
+   else if (is_pos && val < 0)
+      return 0;
+   return val;
+}
+
+static void s30_joypad_get_buttons(unsigned port, input_bits_t *state)
+{
+   s30_joypad_t *joypad = (s30_joypad_t*)&s30_pad;
+
+   if (port == 0)
+   {
+      BITS_COPY16_PTR(state, joypad->pad_state);
+   }
+   else
+   {
+      BIT256_CLEAR_ALL_PTR(state);
+   }
+}
+
+static int16_t s30_joypad_axis(unsigned port, uint32_t joyaxis)
+{
+   if (port != 0)
+      return 0;
+   return s30_joypad_axis_state(port, joyaxis);
+}
+
+static int16_t s30_joypad_state(
+      rarch_joypad_info_t *joypad_info,
+      const struct retro_keybind *binds,
+      unsigned port)
+{
+   unsigned i;
+   int16_t ret                          = 0;
+   uint16_t port_idx                    = joypad_info->joy_idx;
+   s30_joypad_t *joypad                    = (s30_joypad_t*)&s30_pad;
+
+   if (port_idx != 0)
+      return 0;
+
+   for (i = 0; i < RARCH_FIRST_CUSTOM_BIND; i++)
+   {
+      /* Auto-binds are per joypad, not per user. */
+      const uint64_t joykey  = (binds[i].joykey != NO_BTN)
+         ? binds[i].joykey  : joypad_info->auto_binds[i].joykey;
+      const uint32_t joyaxis = (binds[i].joyaxis != AXIS_NONE)
+         ? binds[i].joyaxis : joypad_info->auto_binds[i].joyaxis;
+
+      if (
+               (uint16_t)joykey != NO_BTN 
+            && s30_joypad_button(port_idx, (uint16_t)joykey))
+         ret |= ( 1 << i);
+      else if (joyaxis != AXIS_NONE &&
+            ((float)abs(s30_joypad_axis_state(port_idx, joyaxis)) 
+             / 0x8000) > joypad_info->axis_threshold)
+         ret |= (1 << i);
+   }
+   return ret;
+}
+
+static uint64_t s30_pin_to_joypad(unsigned short pin)
+{
+   switch (pin) {
+      case S30_DPAD_LEFT:
+         return RETRO_DEVICE_ID_JOYPAD_LEFT;
+      case S30_DPAD_RIGHT:
+         return RETRO_DEVICE_ID_JOYPAD_RIGHT;
+      case S30_DPAD_UP:
+         return RETRO_DEVICE_ID_JOYPAD_UP;
+      case S30_DPAD_DOWN:
+         return RETRO_DEVICE_ID_JOYPAD_DOWN;
+
+      case S30_BUTTON_A:
+         return RETRO_DEVICE_ID_JOYPAD_A;
+      case S30_BUTTON_B:
+         return RETRO_DEVICE_ID_JOYPAD_B;
+      case S30_BUTTON_X:
+         return RETRO_DEVICE_ID_JOYPAD_X;
+      case S30_BUTTON_Y:
+         return RETRO_DEVICE_ID_JOYPAD_Y;
+
+      case S30_BUTTON_L1:
+         return RETRO_DEVICE_ID_JOYPAD_L;
+      case S30_BUTTON_L2:
+         return RETRO_DEVICE_ID_JOYPAD_L2;
+      case S30_BUTTON_R1:
+         return RETRO_DEVICE_ID_JOYPAD_R;
+      case S30_BUTTON_R2:
+         return RETRO_DEVICE_ID_JOYPAD_R2;
+
+      case S30_BUTTON_START:
+         return RETRO_DEVICE_ID_JOYPAD_START;
+      case S30_BUTTON_SELECT:
+         return RETRO_DEVICE_ID_JOYPAD_SELECT;
+
+      case S30_VOLUME_UP:
+         return 17;
+      case S30_VOLUME_DOWN:
+         return 18;
+
+      default:
+         return S30_UNSUPPORTED;
+   }
+}
+
+static void s30_joypad_poll(void)
+{
+   struct timeval tv;
+   fd_set fds;
+   int maxfd;
+   int res;
+   struct input_event event;
+
+   tv.tv_sec = 0;
+   tv.tv_usec = 0;
+
+   FD_ZERO(&fds); // Clear FD set for select
+   FD_SET(s30_pad.fdevent1, &fds);
+   FD_SET(s30_pad.fdevent3, &fds);
+
+   maxfd = s30_pad.fdevent1;
+
+   if (maxfd < s30_pad.fdevent3) {
+      maxfd = s30_pad.fdevent3;
+   }
+
+   select(maxfd + 1, &fds, NULL, NULL, &tv);
+
+   s30_joypad_t *joypad = (s30_joypad_t*)&s30_pad;
+
+   for (int i = 0; i < S30_NUM_GPIO; i++) {
+      unsigned int pin = polling_list[i];
+      bool pressed = 1-sunxi_gpio_input(pin);
+
+      uint64_t button = s30_pin_to_joypad(pin);
+
+      if (button == S30_UNSUPPORTED) continue;
+
+      if (pressed) {
+         BIT64_SET(joypad->pad_state, button);
+      } else {
+         BIT64_CLEAR(joypad->pad_state, button);
+      }
+   }
+
+   if (FD_ISSET(s30_pad.fdevent3, &fds)) {
+      while (read(s30_pad.fdevent3, &event, sizeof(struct input_event)) > 0) {
+         if (event.code == S30_BUTTON_POWER) {
+            if (event.value) {
+               BIT64_SET(joypad->pad_state, 16);
+            } else {
+               BIT64_CLEAR(joypad->pad_state, 16);
+            }
+         }
+      }
+   }
+
+   if (FD_ISSET(s30_pad.fdevent1, &fds)) {
+      while (read(s30_pad.fdevent1, &event, sizeof(struct input_event)) > 0) {
+         if (event.type == 3) {
+            uint16_t axis = event.code;
+
+            if (!s30_pad.centered[axis]) {
+               s30_pad.centered[axis] = true;
+               s30_pad.analog_center[axis] = event.value - 128;
+            }
+
+            s30_pad.analog_state[axis] = convert_u8_to_s16(event.value - s30_pad.analog_center[axis]);
+         }
+      }
+   }
+}
+
+static bool s30_joypad_query_pad(unsigned pad)
+{
+   return pad == 0;
+}
+
+static bool s30_joypad_rumble(unsigned pad,
+      enum retro_rumble_effect effect, uint16_t strength)
+{
+   return false;
+}
+
+input_device_driver_t s30_joypad = {
+   s30_joypad_init,
+   s30_joypad_query_pad,
+   s30_joypad_destroy,
+   s30_joypad_button,
+   s30_joypad_state,
+   s30_joypad_get_buttons,
+   s30_joypad_axis,
+   s30_joypad_poll,
+   s30_joypad_rumble,
+   s30_joypad_name,
+   "s30",
+};
diff -urN --new-file RetroArch/input/input_autodetect_builtin.c rizos-ra/input/input_autodetect_builtin.c
--- RetroArch/input/input_autodetect_builtin.c	2021-10-04 20:45:45.238708867 +0000
+++ rizos-ra/input/input_autodetect_builtin.c	2021-10-04 20:43:57.375657176 +0000
@@ -684,8 +684,34 @@
 DECL_AXIS(r_y_plus,  -3) \
 DECL_AXIS(r_y_minus, +3)
 
+#define S30_DEFAULT_BINDS \
+DECL_BTN_EX(a,           8, "A") \
+DECL_BTN_EX(b,           0, "B") \
+DECL_BTN_EX(x,           9, "X") \
+DECL_BTN_EX(y,           1, "Y") \
+DECL_BTN_EX(start,       3, "Start") \
+DECL_BTN_EX(select,      2, "Select") \
+DECL_BTN_EX(up,          4, "D-Pad Up") \
+DECL_BTN_EX(down,        5, "D-Pad Down") \
+DECL_BTN_EX(left,        6, "D-Pad Left") \
+DECL_BTN_EX(right,       7, "D-Pad Right") \
+DECL_BTN_EX(l,          10, "L") \
+DECL_BTN_EX(r,          11, "R") \
+DECL_BTN_EX(l2,         12, "L2") \
+DECL_BTN_EX(r2,         13, "R2") \
+DECL_BTN_EX(menu_toggle, 16, "Power") \
+DECL_BTN_EX(volume_up, 17, "+") \
+DECL_BTN_EX(volume_down, 18, "-") \
+DECL_AXIS_EX(l_x_plus,  +1, "Stick Right") \
+DECL_AXIS_EX(l_x_minus, -1, "Stick Left") \
+DECL_AXIS_EX(l_y_plus,  +0, "Stick Down") \
+DECL_AXIS_EX(l_y_minus, -0, "Stick Up")
+
 const char* const input_builtin_autoconfs[] =
 {
+#ifdef POCKETGOS30
+   DECL_AUTOCONF_DEVICE("Pocketgo S30 Controller", "s30", S30_DEFAULT_BINDS),
+#endif
 #if defined(_WIN32) && defined(_XBOX)
    DECL_AUTOCONF_DEVICE("XInput Controller (User 1)", "xdk", XINPUT_DEFAULT_BINDS),
    DECL_AUTOCONF_DEVICE("XInput Controller (User 2)", "xdk", XINPUT_DEFAULT_BINDS),
diff -urN --new-file RetroArch/input/input_driver.c rizos-ra/input/input_driver.c
--- RetroArch/input/input_driver.c	2021-10-04 20:45:45.238708867 +0000
+++ rizos-ra/input/input_driver.c	2021-10-04 20:43:57.375657176 +0000
@@ -112,6 +112,10 @@
 #endif
 
 input_device_driver_t *joypad_drivers[] = {
+#ifdef POCKETGOS30
+   &s30_joypad,
+#endif
+#if !defined(POCKETGOS30)
 #ifdef HAVE_XINPUT
    &xinput_joypad,
 #endif
@@ -181,11 +185,16 @@
 #ifdef EMSCRIPTEN
    &rwebpad_joypad,
 #endif
+#endif
    &null_joypad,
    NULL,
 };
 
 input_driver_t *input_drivers[] = {
+#ifdef POCKETGOS30
+   &input_s30,
+#endif
+#if !defined(POCKETGOS30)
 #ifdef ORBIS
    &input_ps4,
 #endif
@@ -258,6 +267,7 @@
    &input_winraw,
 #endif
 #endif
+#endif
    &input_null,
    NULL,
 };
diff -urN --new-file RetroArch/input/input_driver.h rizos-ra/input/input_driver.h
--- RetroArch/input/input_driver.h	2021-10-04 20:45:45.238708867 +0000
+++ rizos-ra/input/input_driver.h	2021-10-04 20:43:57.375657176 +0000
@@ -729,6 +729,7 @@
 extern input_driver_t input_dos;
 extern input_driver_t input_winraw;
 extern input_driver_t input_wayland;
+extern input_driver_t input_s30;
 
 extern input_device_driver_t dinput_joypad;
 extern input_device_driver_t linuxraw_joypad;
@@ -752,6 +753,7 @@
 extern input_device_driver_t mfi_joypad;
 extern input_device_driver_t dos_joypad;
 extern input_device_driver_t rwebpad_joypad;
+extern input_device_driver_t s30_joypad;
 
 #ifdef HAVE_HID
 extern hid_driver_t iohidmanager_hid;
diff -urN --new-file RetroArch/Makefile.common rizos-ra/Makefile.common
--- RetroArch/Makefile.common	2021-10-04 20:45:45.218709040 +0000
+++ rizos-ra/Makefile.common	2021-10-04 20:43:57.035660225 +0000
@@ -186,6 +186,11 @@
    HAVE_UNIX = 1
 endif
 
+ifeq ($(POCKETGOS30), 1)
+   OBJ += input/drivers/s30_input.o \
+          input/drivers_joypad/s30_joypad.o
+endif
+
 ifeq ($(HAVE_UNIX), 1)
    OBJ += frontend/drivers/platform_unix.o
 endif
@@ -2174,34 +2179,6 @@
 
    endif
 
-   ifeq ($(HAVE_DISCORD), 1)
-      NEED_CXX_LINKER = 1
-      DEFINES += -DHAVE_DISCORD
-      INCLUDE_DIRS += -Ideps/discord-rpc/include
-
-      ifneq ($(HAVE_THREADS), 1)
-         DEFINES += -DDISCORD_DISABLE_IO_THREAD
-      endif
-
-      OBJ     += deps/discord-rpc/src/discord_rpc.o \
-                 deps/discord-rpc/src/rpc_connection.o \
-                 deps/discord-rpc/src/serialization.o
-
-      ifneq ($(findstring Win32,$(OS)),)
-         OBJ  += deps/discord-rpc/src/discord_register_win.o \
-                 deps/discord-rpc/src/connection_win.o
-         LIBS += -lpsapi -ladvapi32
-      endif
-      ifneq ($(findstring Linux,$(OS)),)
-         OBJ  += deps/discord-rpc/src/discord_register_linux.o \
-                 deps/discord-rpc/src/connection_unix.o
-      endif
-      ifneq ($(findstring Darwin,$(OS)),)
-         OBJ  += deps/discord-rpc/src/discord_register_osx.o \
-                 deps/discord-rpc/src/connection_unix.o
-      endif
-   endif
-
    ifeq ($(HAVE_TRANSLATE), 1)
       DEFINES += -DHAVE_TRANSLATE
    endif
Binary files RetroArch/retroarch199 and rizos-ra/retroarch199 differ
diff -urN --new-file RetroArch/retroarch_data.h rizos-ra/retroarch_data.h
--- RetroArch/retroarch_data.h	2021-10-04 20:45:45.282708488 +0000
+++ rizos-ra/retroarch_data.h	2021-10-04 20:43:57.703654234 +0000
@@ -612,7 +612,7 @@
 #if defined(HAVE_SDL) && !defined(HAVE_SDL_DINGUX)
    &video_sdl,
 #endif
-#ifdef HAVE_SDL2
+#if defined(HAVE_SDL2) && !defined(POCKETGOS30)
    &video_sdl2,
 #endif
 #ifdef HAVE_SDL_DINGUX
